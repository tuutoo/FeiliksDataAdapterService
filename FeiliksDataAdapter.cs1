using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.ServiceProcess;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Xsl;
using System.Text;
using System.IO;
using System.Collections.Generic;
using System.Messaging;
using System.Xml.Schema;

namespace DataAdapter
{
    [System.ServiceProcess.ServiceProcessDescription("Feiliks Data Adapter Service")]
    public class FeiliksDataAdapter : System.ServiceProcess.ServiceBase
    {
        private System.ComponentModel.IContainer components;
        private System.Threading.Thread serviceth;
        System.Data.DataSet settings = new DataSet();
        private int timer = 30;
        private bool tcpStoped;
        string ConnectionType = "";
        string ConnectionString = "";

        public FeiliksDataAdapter()
        {
            InitializeComponent();
        }

        private void Service()
        {
            //ESettings.xml,加密后的配置文件
            //Settings.xml，原始配置文件，此文件在生成了ESettings.xml后可以删除
            #region 获取设置
            try
            {
                #region 获取设置 settings
                System.IO.MemoryStream settingStream = new System.IO.MemoryStream();
                System.IO.FileStream efs;
                System.IO.FileStream nfs;
                byte[] key = System.Text.Encoding.Unicode.GetBytes("加密秘钥");//'加密秘钥'可修改
                byte[] iv = System.Text.Encoding.Unicode.GetBytes("初始矢量");//‘初始矢量’可修改
                System.Security.Cryptography.DES des = System.Security.Cryptography.DES.Create();
                if (System.IO.File.Exists(System.Windows.Forms.Application.StartupPath + "\\ESettings.xml"))
                {
                    efs = new System.IO.FileStream(System.Windows.Forms.Application.StartupPath + "\\ESettings.xml", System.IO.FileMode.Open);
                    System.Security.Cryptography.CryptoStream cs = new System.Security.Cryptography.CryptoStream(efs, des.CreateDecryptor(key, iv), System.Security.Cryptography.CryptoStreamMode.Read);
                    byte[] buff = new byte[1024];
                    int l = 0;
                    for (; ; )
                    {
                        l = cs.Read(buff, 0, 1024);
                        settingStream.Write(buff, 0, l);
                        if (l < 1024)
                            break;
                    }
                    settingStream.Position = 0;
                    cs.Close();
                    efs.Close();
                }
                else
                {
                    nfs = new System.IO.FileStream(System.Windows.Forms.Application.StartupPath + "\\Settings.xml", System.IO.FileMode.Open);
                    efs = new System.IO.FileStream(System.Windows.Forms.Application.StartupPath + "\\ESettings.xml", System.IO.FileMode.Create);
                    System.Security.Cryptography.CryptoStream cs = new System.Security.Cryptography.CryptoStream(efs, des.CreateEncryptor(key, iv), System.Security.Cryptography.CryptoStreamMode.Write);
                    byte[] buff = new byte[1024];
                    int l = 0;
                    for (; ; )
                    {
                        l = nfs.Read(buff, 0, 1024);
                        cs.Write(buff, 0, l);
                        settingStream.Write(buff, 0, l);
                        if (l < 1024)
                            break;
                    }
                    cs.FlushFinalBlock();
                    cs.Close();
                    nfs.Close();
                    efs.Close();
                    settingStream.Position = 0;
                }
                System.IO.StreamReader sr = new System.IO.StreamReader(settingStream, System.Text.Encoding.UTF8);
                settings.ReadXml(sr);
                settingStream.Close();
                #endregion
                if (settings == null || settings.Tables.Count == 0 || settings.Tables["App"] == null || settings.Tables["App"].Rows.Count == 0)
                {
                    this.WriteLog("无配置文件或配置信息有误");
                    tcpStoped = true;
                    return;
                }
                #region 配置文件必填
                if (settings.Tables["App"].Columns.Contains("ConnectionType") == false || settings.Tables["App"].Rows[0]["ConnectionType"].ToString().Trim() == "")
                {
                    this.WriteLog("未配置数据库类型");
                    tcpStoped = true;
                    return;
                }
                if (settings.Tables["App"].Columns.Contains("ConnectionString") == false || settings.Tables["App"].Rows[0]["ConnectionString"].ToString().Trim() == "")
                {
                    this.WriteLog("未配置数据库连接");
                    tcpStoped = true;
                    return;
                }
                #endregion

                ConnectionType =   settings.Tables["App"].Rows[0]["ConnectionType"].ToString().Trim();
                ConnectionString = settings.Tables["App"].Rows[0]["ConnectionString"].ToString().Trim();
            }
            catch (System.Exception error)
            {
                this.WriteLog(error.Message);
                tcpStoped = true;
            }
            #endregion
            IDataAccess DAC = GetDataAccess();
            if (DAC == null)
            {
                this.WriteLog("数据库配置有误");
                tcpStoped = true;
                return;
            }
            if (DAC.ErrMessages != "")
            {
                this.WriteLog(DAC.ErrMessages);
                tcpStoped = true;
                return;
            }
            do
            {
                string strMonthDate = DateTime.Now.ToString("yyyyMM");
                //1. 从MQ、FTP等获取文件到本地文件夹。接收成功回执(是否发送回执,并且回执文件夹不为空，并且流程编号与报文中一致不为空)
                //2. 接收的文件校验。校验结果回执
                //3. XSLT报文格式转换。转换结果回执
                //4. MQ发送。如果是报关单，需要记录随附单证
                //回执部分：MQ接收原始回执，XSLT文件格式转换，MQ、FTP发送
                #region 1. 从MQ、FTP等获取文件到本地文件夹。
                //A. 全部接收到保存文件夹
                //B. 记录接收历史记录
                //C. 是否发送回执,并且回执文件夹不为空，并且流程编号不为空.生成回执文件
                DataTable dtConfigList = DAC.GetTable("SELECT * FROM C2K.FDA_ReceiveConfig WHERE isnull(IsEnabled,'0')='1' ");
                if (dtConfigList != null && dtConfigList.Rows.Count > 0)
                {
                    string backupFolder = "";
                    foreach (DataRow drConfig in dtConfigList.Rows)
                    {
                        #region 数据库配置检验
                        if (drConfig["TransType"].ToString().Trim() == "")
                        {
                            WriteLog("报文接收的传输方式不能为空。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "报文接收的传输方式不能为空");
                            continue;
                        }
                        if (drConfig["TransType"].ToString().Trim().ToLower() != "mq" && drConfig["TransType"].ToString().Trim().ToLower() != "ftp"
                             && drConfig["TransType"].ToString().Trim().ToLower() != "folder")
                        {
                            WriteLog("报文接收的传输方式只能是：MQ、FTP、文件夹 其中之一。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "报文接收的传输方式只能是：MQ、FTP、文件夹 其中之一");
                            continue;
                        }
                        if (drConfig["URL"].ToString().Trim() == "")
                        {
                            WriteLog("报文接收的URL不能为空(MQ、FTP或文件夹路径)。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "报文接收的URL不能为空(MQ、FTP或文件夹路径)");
                            continue;
                        }

                        if (drConfig["TransType"].ToString().Trim().ToLower() == "ftp" && (drConfig["UserName"].ToString().Trim() == "" || drConfig["Password"].ToString().Trim() == ""))
                        {
                            WriteLog("报文接收的传输方式是:FTP时，用户名和密码不能为空。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "报文接收的传输方式是:FTP时，用户名和密码不能为空");
                            continue;
                        }
                        
                        if (drConfig["TransType"].ToString().Trim().ToLower() == "folder" && Directory.Exists(drConfig["URL"].ToString().Trim()) == false)
                        {
                            WriteLog("报文接收的传输方式是:文件夹时，所配置的原始文件夹不存在。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "报文接收的传输方式是:文件夹时，所配置的原始文件夹不存在");
                            continue;
                        }
                        if (drConfig["SaveFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文接收的保存路径不能为空。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "报文发送的保存路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["SaveFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文接收的保存路径不存在。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "报文发送的保存路径不存在");
                            continue;
                        }
                        backupFolder = drConfig["SaveFolder"].ToString().Trim() + "\\Backup\\" + strMonthDate;
                        if (!Directory.Exists(backupFolder))
                        {
                            Directory.CreateDirectory(backupFolder);
                        }
                        #endregion

                        if (drConfig["TransType"].ToString().Trim().ToLower() == "mq")
                        {
                            #region MQ
                            try
                            {
                                MessageQueue receiveQueue = new MessageQueue(drConfig["URL"].ToString().Trim());
                                receiveQueue.Formatter = new XmlMessageFormatter(new Type[] { typeof(XmlDocument) });
                                MessageEnumerator myEnumerator = receiveQueue.GetMessageEnumerator2();
                                while (myEnumerator.MoveNext())
                                {
                                    System.Messaging.Message msg = myEnumerator.Current;
                                    try
                                    {
                                        if (msg != null && msg.Body != null)
                                        {
                                            XmlDocument docReply = (XmlDocument)msg.Body;
                                            docReply.Save(backupFolder + "\\" + msg.Label.Trim() + ".xml");
                                            File.Copy(backupFolder + "\\" + msg.Label.Trim() + ".xml", drConfig["SaveFolder"].ToString().Trim() + "\\" + msg.Label.Trim() + ".xml");
                                            WriteLog("MQ报文接收成功." + msg.Label.Trim());
                                            //记录接收历史记录
                                            SaveReceiveHis(DAC,drConfig["SaveFolder"].ToString().Trim(),backupFolder + "\\" + msg.Label.Trim() + ".xml",drConfig["Indx"].ToString().Trim());

                                            #region 生成回执到回执文件夹
                                            if (drConfig["IsSendReceipt"].ToString().Trim() == "1" && drConfig["ReceiptFolder"].ToString().Trim() != ""
                                                && Directory.Exists(drConfig["ReceiptFolder"].ToString().Trim()) && drConfig["TaskCode"].ToString().Trim() != "")
                                            {
                                                string[] splitFileName = msg.Label.Trim().Split(new char[] { '$' });
                                                if (splitFileName != null && splitFileName.Length >= 2 && splitFileName[0].Trim() != ""
                                                    && splitFileName[0].Trim() == drConfig["TaskCode"].ToString().Trim() && splitFileName[1].Trim() != "")
                                                {
                                                    CreateReceiptFile(drConfig["ReceiptFolder"].ToString().Trim() + "\\" + splitFileName[0].Trim() + "$" + splitFileName[1].Trim() + "$" + DateTime.Now.ToString("yyyyMMddHHmmssfffffff") + ".xml", "报文接收成功", splitFileName[1].Trim());
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        this.WriteLog("获取MQ报文异常ex:" + ex.Message + ex.StackTrace);
                                    }
                                    myEnumerator.RemoveCurrent();
                                }
                            }
                            catch (Exception ex)
                            {
                                this.WriteLog("获取MQ报文异常ex:" + ex.Message + ex.StackTrace);
                                SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "获取MQ报文异常ex:" + ex.Message + ex.StackTrace);
                            }
                            #endregion
                        }
                        else if (drConfig["TransType"].ToString().Trim().ToLower() == "ftp")
                        {
                            #region FTP
                            try
                            {
                                FtpWeb ftp = new FtpWeb(drConfig["URL"].ToString().Trim(), "", drConfig["UserName"].ToString().Trim(), drConfig["Password"].ToString().Trim());
                                string[] fileList = ftp.GetFileList("");
                                if (fileList != null && fileList.Length > 0)
                                {
                                    //下载文件
                                    //删除FTP文件
                                    FileInfo fileInfo;
                                    foreach (string fileName in fileList)
                                    {
                                        fileInfo = new FileInfo(fileName);
                                        if ((DateTime.Now - fileInfo.LastWriteTime).TotalSeconds <= 10)
                                        {
                                            continue;
                                        }
                                        ftp.Download(backupFolder, fileName);
                                        if (System.IO.File.Exists(backupFolder + "\\" + fileName))
                                        {
                                            ftp.Delete(fileName);
                                        }
                                        File.Copy(backupFolder + "\\" + fileName, drConfig["SaveFolder"].ToString().Trim() + "\\"+fileName);
                                        WriteLog("MQ报文接收成功." + fileName);

                                        //记录接收历史记录
                                        SaveReceiveHis(DAC, drConfig["SaveFolder"].ToString().Trim(), backupFolder + "\\" + fileName , drConfig["Indx"].ToString().Trim());

                                        //生成回执到回执文件夹
                                        if (drConfig["IsSendReceipt"].ToString().Trim() == "1" && drConfig["ReceiptFolder"].ToString().Trim() != ""
                                            && Directory.Exists(drConfig["ReceiptFolder"].ToString().Trim()) && drConfig["TaskCode"].ToString().Trim() != "")
                                        {
                                            string[] splitFileName = fileName.Trim().Split(new char[] { '$' });
                                            if (splitFileName != null && splitFileName.Length >= 2 && splitFileName[0].Trim() != ""
                                                && splitFileName[0].Trim() == drConfig["TaskCode"].ToString().Trim() && splitFileName[1].Trim() != "")
                                            {
                                                CreateReceiptFile(drConfig["ReceiptFolder"].ToString().Trim() + "\\" + splitFileName[0].Trim() + "$" + splitFileName[1].Trim() + "$" + DateTime.Now.ToString("yyyyMMddHHmmssfffffff") + ".xml", "报文接收成功", splitFileName[1].Trim());
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                this.WriteLog("获取FTP报文异常ex:" + ex.Message + ex.StackTrace);
                                SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "获取FTP报文异常ex:" + ex.Message + ex.StackTrace);
                            }
                            #endregion
                        }
                        else if (drConfig["TransType"].ToString().Trim().ToLower() == "folder")
                        {
                            #region 文件夹
                            try
                            {
                                FileInfo fileInfo;
                                foreach (string file in Directory.GetFiles(drConfig["URL"].ToString().Trim()))
                                {
                                    fileInfo = new FileInfo(file);
                                    if ((DateTime.Now - fileInfo.LastWriteTime).TotalSeconds <= 10)
                                    {
                                        continue;
                                    }
                                    File.Move(file, backupFolder + "\\" + Path.GetFileName(file));
                                    File.Copy(backupFolder + "\\" + Path.GetFileName(file), drConfig["SaveFolder"].ToString().Trim() + "\\" + Path.GetFileName(file));
                                    WriteLog("文件夹报文接收成功." + file);
                                    //记录接收历史记录
                                    SaveReceiveHis(DAC, drConfig["SaveFolder"].ToString().Trim(), backupFolder + "\\" + Path.GetFileName(file).Trim(), drConfig["Indx"].ToString().Trim());

                                    //生成回执到回执文件夹
                                    if (drConfig["IsSendReceipt"].ToString().Trim() == "1" && drConfig["ReceiptFolder"].ToString().Trim() != ""
                                        && Directory.Exists(drConfig["ReceiptFolder"].ToString().Trim()) && drConfig["TaskCode"].ToString().Trim() != "")
                                    {
                                        string[] splitFileName = Path.GetFileName(file).Trim().Split(new char[] { '$' });
                                        if (splitFileName != null && splitFileName.Length >= 2 && splitFileName[0].Trim() != ""
                                            && splitFileName[0].Trim() == drConfig["TaskCode"].ToString().Trim() && splitFileName[1].Trim() != "")
                                        {
                                            CreateReceiptFile(drConfig["ReceiptFolder"].ToString().Trim() + "\\" + splitFileName[0].Trim() + "$" + splitFileName[1].Trim() + "$" + DateTime.Now.ToString("yyyyMMddHHmmssfffffff") + ".xml", "报文接收成功", splitFileName[1].Trim());
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                this.WriteLog("获取文件夹报文异常ex:" + ex.Message + ex.StackTrace);
                                SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_ReceiveConfig", "获取文件夹报文异常ex:" + ex.Message + ex.StackTrace);
                            }
                            #endregion
                        }
                    }
                }
                #endregion
                #region 2. 接收的文件校验。校验结果回执
                dtConfigList = DAC.GetTable("SELECT * FROM C2K.FDA_CheckConfig WHERE isnull(IsEnabled,'0')='1' ");
                if (dtConfigList != null && dtConfigList.Rows.Count > 0)
                {
                    string backupFolder;
                    foreach (DataRow drConfig in dtConfigList.Rows)
                    {
                        #region 数据库配置检验
                        if (drConfig["CheckFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文校验的校验路径不能为空。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_CheckConfig", "报文校验的校验路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["CheckFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文校验的校验路径不存在。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_CheckConfig", "报文校验的校验路径不存在");
                            continue;
                        }
                        if (drConfig["SendFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文校验的校验路径不能为空。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_CheckConfig", "报文校验的校验路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["SendFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文校验的成功路径不存在。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_CheckConfig", "报文校验的成功路径不存在");
                            continue;
                        }
                        if (drConfig["BakFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文校验的校验路径不能为空。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_CheckConfig", "报文校验的校验路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["BakFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文校验的备份路径不存在。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_CheckConfig", "报文校验的备份路径不存在");
                            continue;
                        }
                        if (drConfig["ReceiptFolder"].ToString().Trim() == "" && Directory.Exists(drConfig["ReceiptFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文校验的回执路径不存在。Indx：" + drConfig["Indx"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_CheckConfig", "报文校验的回执路径不存在");
                            continue;
                        }
                        backupFolder = drConfig["BakFolder"].ToString().Trim() + "\\Backup\\" + strMonthDate;
                        if (!Directory.Exists(backupFolder))
                        {
                            Directory.CreateDirectory(backupFolder);
                        }
                        #endregion
                       
                    }
                }
                #endregion
                #region 3. XSLT报文格式转换。转换结果回执
                dtConfigList = DAC.GetTable("SELECT * FROM C2K.FDA_TransformConfig WHERE isnull(IsEnabled,'0')='1' AND isnull(TaskCode,'')<> ''");
                if (dtConfigList != null && dtConfigList.Rows.Count > 0)
                {
                    foreach (DataRow drConfig in dtConfigList.Rows)
                    {
                        #region  数据库配置检验
                        if (drConfig["XSLTFile"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的转换模板(XSLT)不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换模板(XSLT)不能为空");
                            continue;
                        }
                        if (File.Exists(drConfig["XSLTFile"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的转换模板(XSLT) 不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换模板(XSLT) 不存在");
                            continue;
                        }
                        if (drConfig["TransformFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的待转换路径不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的待转换路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["TransformFolder"].ToString().Trim() )==false)
                        {
                            WriteLog("报文转换的待转换路径不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的待转换路径不存在");
                            continue;
                        }
                        if (drConfig["TransformSuccessFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的转换成功路径不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换成功路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["TransformSuccessFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的转换成功路径不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换成功路径不存在");
                            continue;
                        }
                        if (drConfig["TransformFailedFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的转换失败路径不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换失败路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["TransformFailedFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的转换失败路径不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换失败路径不存在");
                            continue;
                        }
                        if (drConfig["TransformBackupFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的转换备份路径不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换备份路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["TransformBackupFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的转换备份路径不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换备份路径不存在");
                            continue;
                        }
                        #endregion

                        FileInfo fileInfo; string fileName, TaskCode;
                        foreach (string fileFullName in Directory.GetFiles(drConfig["TransformFolder"].ToString().Trim()))
                        {
                            fileInfo = new FileInfo(fileFullName);
                            if ((DateTime.Now - fileInfo.LastWriteTime).TotalSeconds <= 10)//最后修改时间10秒内的文件不处理，防止文件未写完
                            {
                                continue;
                            }
                            fileName = fileInfo.Name;
                            if (fileInfo.Length <= 0)
                            {
                                //MoveFile(fileFullName, drConfig["TransformFailedFolder"].ToString().Trim());
                                //this.WriteLog("报文校验异常：报文无内容.报文文件：" + fileName);
                                continue;
                            }
                            string[] splitFileName = fileName.Split(new char[] { '$' });
                            if (splitFileName == null || splitFileName.Length == 0)
                            {
                                //MoveFile(fileFullName, drConfig["TransformFailedFolder"].ToString().Trim());
                                //WriteLog("报文文件名格式不正确." + fileName);
                                continue;
                            }
                            TaskCode = splitFileName[0];
                            if (TaskCode == "")
                            {
                                //MoveFile(fileFullName, drConfig["TransformFailedFolder"].ToString().Trim());
                                //WriteLog("报文无流程编号." + fileName);
                                continue;
                            }
                            if (TaskCode != drConfig["TaskCode"].ToString().Trim())
                            {
                                continue;
                            }
                            try
                            {
                                System.Xml.Xsl.XslCompiledTransform transform = new XslCompiledTransform();
                                transform.Load(drConfig["XSLTFile"].ToString().Trim());
                                transform.Transform(fileFullName, drConfig["TransformSuccessFolder"].ToString().Trim() + "\\" + fileName);

                                MoveFile(fileFullName, drConfig["TransformBackupFolder"].ToString().Trim());
                            }
                            catch (Exception ex2)
                            {
                                //此处可以生成校验错误的回执文件，暂无
                                MoveFile(fileFullName, drConfig["TransformFailedFolder"].ToString().Trim());
                                this.WriteLog("报文转换异常：" + ex2.Message + ex2.StackTrace);
                                continue;
                            }
                        }
                    }
                }
                #endregion
                #region 3. XSLT报文格式转换。转换结果回执
                dtConfigList = DAC.GetTable("SELECT * FROM C2K.FDA_TransformConfig WHERE isnull(IsEnabled,'0')='1' AND isnull(TaskCode,'')<> ''");
                if (dtConfigList != null && dtConfigList.Rows.Count > 0)
                {
                    string BackupPath, ErrorPath, TempPath;
                    foreach (DataRow drConfig in dtConfigList.Rows)
                    {
                        #region  数据库配置检验
                        if (drConfig["XSLTFile"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的转换模板(XSLT)不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换模板(XSLT)不能为空");
                            continue;
                        }
                        if (File.Exists(drConfig["XSLTFile"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的转换模板(XSLT) 不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换模板(XSLT) 不存在");
                            continue;
                        }
                        if (drConfig["TransformFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的待转换路径不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的待转换路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["TransformFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的待转换路径不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的待转换路径不存在");
                            continue;
                        }
                        if (drConfig["TransformSuccessFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的转换成功路径不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换成功路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["TransformSuccessFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的转换成功路径不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换成功路径不存在");
                            continue;
                        }

                        if (drConfig["TransformBackupFolder"].ToString().Trim() == "")
                        {
                            WriteLog("报文转换的转换备份路径不能为空。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换备份路径不能为空");
                            continue;
                        }
                        if (Directory.Exists(drConfig["TransformBackupFolder"].ToString().Trim()) == false)
                        {
                            WriteLog("报文转换的转换备份路径不存在。流程编号：" + drConfig["TaskCode"].ToString().Trim().ToLower());
                            SetConfigDisabled(DAC, drConfig["Indx"].ToString().Trim(), "FDA_TransformConfig", "报文转换的转换备份路径不存在");
                            continue;
                        }
                        #endregion

                        BackupPath = drConfig["TransformBackupFolder"].ToString().Trim() + "\\" + strMonthDate;
                        if (!Directory.Exists(BackupPath))
                        {
                            Directory.CreateDirectory(BackupPath);
                        }
                        ErrorPath = drConfig["TransformBackupFolder"].ToString().Trim() + "\\Failed";
                        if (!Directory.Exists(ErrorPath))
                        {
                            Directory.CreateDirectory(ErrorPath);
                        }
                        TempPath = drConfig["TransformBackupFolder"].ToString().Trim() + "\\Temporary";
                        if (!Directory.Exists(TempPath))
                        {
                            Directory.CreateDirectory(TempPath);
                        }
                        FileInfo fileInfo; string fileName, TaskCode, tempFileName;
                        foreach (string fileFullName in Directory.GetFiles(drConfig["TransformFolder"].ToString().Trim()))
                        {
                            fileInfo = new FileInfo(fileFullName);
                            if ((DateTime.Now - fileInfo.LastWriteTime).TotalSeconds <= 10)//最后修改时间10秒内的文件不处理，防止文件未写完
                            {
                                continue;
                            }

                            string[] splitFileName = fileInfo.Name.Split(new char[] { '$' });
                            if (splitFileName == null || splitFileName.Length == 0)
                            {
                                continue;
                            }
                            TaskCode = splitFileName[0];
                            if (TaskCode == "")
                            {
                                continue;
                            }
                            if (TaskCode != drConfig["TaskCode"].ToString().Trim())
                            {
                                continue;
                            }

                            fileName = Path.GetFileNameWithoutExtension(fileFullName) + ".xml";
                            tempFileName = TempPath + "\\" + fileName;
                            File.Copy(fileFullName, tempFileName);
                            File.Delete(fileFullName);

                            if (fileInfo.Length <= 0)
                            {
                                MoveFile(tempFileName, ErrorPath);
                                WriteLog("报文无内容." + fileName);
                                continue;
                            }
                            #region 报文转换
                            try
                            {
                                System.Xml.Xsl.XslCompiledTransform transform = new XslCompiledTransform();
                                transform.Load(drConfig["XSLTFile"].ToString().Trim());
                                transform.Transform(tempFileName, drConfig["TransformSuccessFolder"].ToString().Trim() + "\\" + fileName);

                                MoveFile(tempFileName, BackupPath);
                                WriteLog("报文转换成功:" + tempFileName);

                            }
                            catch (Exception ex2)
                            {
                                //此处可以生成校验错误的回执文件，暂无
                                MoveFile(tempFileName, ErrorPath);
                                this.WriteLog("报文转换异常：" + ex2.Message + ex2.StackTrace);
                                continue;
                            }
                            #endregion
                        }
                    }
                }
                #endregion
                for (int t = 0; t < timer; t++)
                {
                    System.Threading.Thread.Sleep(1000);
                    if (tcpStoped)
                    {
                        WriteLog("Service Stop By User" + tcpStoped.ToString());
                        break;
                    }
                }
            } while (!tcpStoped);
        }

        private IDataAccess GetDataAccess()
        {
            try
            {
                IDataAccess idac = null;
                if (string.IsNullOrEmpty(ConnectionType) == false && string.IsNullOrEmpty(ConnectionString) == false)
                {
                    switch (ConnectionType.ToUpper())
                    {
                        case "SQLSERVER":
                            idac = new SQLDataAccess(ConnectionString);
                            //WriteLog("Connect To SQL");
                            break;
                        case "ORACLE":
                            idac = new OraDataAccess(ConnectionString);
                            WriteLog("Connect To ORA");
                            break;
                        case "OLEDB":
                            idac = new OleDataAccess(ConnectionString);
                            WriteLog("Connect To OLE");
                            break;
                    }
                }
                return idac;
            }
            catch (Exception ex)
            {
                WriteLog("数据库配置有误：" + ex.Message);
                return null;
            }
        }
        public void WriteLog(string message)
        {
            try
            {
                System.IO.StreamWriter sw = new System.IO.StreamWriter(System.Windows.Forms.Application.StartupPath + "\\Log\\DSEvent" + DateTime.Now.ToString("yyyyMMdd") + ".log", true);
                sw.Write(DateTime.Now.ToString() + "\t" + message + "\r\n");
                sw.Close();
            }
            catch
            { }
        }
        public void MoveFile(string fileName, string bkpath)
        {
            try
            {
                if (string.IsNullOrEmpty(bkpath))
                {
                    File.Delete(fileName);
                    return;
                }
                string fname = bkpath + "\\" + Path.GetFileName(fileName);
                if (Path.GetExtension(fname) == "")
                {
                    fname = fname + ".xml";
                }
                if (!Directory.Exists(bkpath))
                {
                    Directory.CreateDirectory(bkpath);
                }
                if (File.Exists(fname))
                {
                    File.Delete(fname);
                }

                File.Move(fileName, fname);
            }
            catch
            {
                File.Delete(fileName);
            }
        }
        private void SetConfigDisabled(IDataAccess DAC, string indx,string tableName,string message)
        {
            DAC.ExecuteSql("UPDATE " + tableName + " SET IsEnabled='0',Remark='" + message + ";'+ISNULL(Remark,'') WHERE indx=" + indx);
        }
        private void SaveReceiveHis(IDataAccess DAC, string SaveFolder, string FileBackupPath, string ReceiveConfigIndx)
        {
            DataTable dtTemp = DAC.GetTable("SELECT * FROM C2K.FDA_ReceiveHistory WHERE 1=2");
            DataRow drTemp = dtTemp.NewRow();
            drTemp["MakeTime"] = DateTime.Now.ToString();
            drTemp["SaveFolder"] = SaveFolder;
            drTemp["FileBackupPath"] = FileBackupPath;
            drTemp["ReceiveConfigIndx"] = ReceiveConfigIndx;
            DAC.Insert("FDA_ReceiveHistory", drTemp);
        }
        private void CreateReceiptFile(string fileName, string message, string refCode)
        {
            XmlTextWriter xtw = new XmlTextWriter(fileName, Encoding.UTF8);

            xtw.Formatting = System.Xml.Formatting.Indented;
            xtw.IndentChar = '\t';
            xtw.WriteStartDocument();

            xtw.WriteStartElement("回执信息");
            WriteElement(xtw, "企业编号", refCode);//相关号
            WriteElement(xtw, "文档编号", refCode);//相关号
            WriteElement(xtw, "统一编号", "");//统一编号
            WriteElement(xtw, "海关编号", "");//海关编号
            WriteElement(xtw, "收到回执日期", DateTime.Now.ToString());//
            WriteElement(xtw, "回执状态", "");//回执编码
            WriteElement(xtw, "回执内容",  message);//回执文字信息
            WriteElement(xtw, "主管海关", "");
            WriteElement(xtw, "代理企业", "");
            WriteElement(xtw, "报关员卡号", "");
            WriteElement(xtw, "经营单位代码", "");
            WriteElement(xtw, "申报日期", "");
            WriteElement(xtw, "件数", "");
            WriteElement(xtw, "净重", "");
            WriteElement(xtw, "毛重", "");
            WriteElement(xtw, "提运单号", "");
            WriteElement(xtw, "运输方式", "");
            WriteElement(xtw, "运输工具名称", "");
            WriteElement(xtw, "放行回执日期", "");
            xtw.WriteEndElement();

            xtw.WriteEndDocument();
            xtw.Close();
        }
        private void WriteElement(XmlTextWriter xtw, string el, string v)
        {
            xtw.WriteStartElement(el);
            if (v == "")
            {
                //xtw.WriteAttributeString("xsi:nil", "true");
            }
            else
            {
                xtw.WriteString(v);
            }
            xtw.WriteEndElement();
        }

        #region static Function For Progrom
        static void Main(string[] args)
        {
            if (args.Length > 0)
            {
                foreach (string arg in args)
                {
                    switch (arg.ToLower())
                    {
                        case "service":
                            System.ServiceProcess.ServiceBase[] ServicesToRun;
                            ServicesToRun = new System.ServiceProcess.ServiceBase[] { new DataService() };
                            System.ServiceProcess.ServiceBase.Run(ServicesToRun);
                            break;
                        case "install":
                            Install();
                            break;
                        case "uninstall":
                            UnInstall();
                            break;
                        case "start":
                            System.ServiceProcess.ServiceController ctlstart = new ServiceController("DPADataService");
                            System.Console.WriteLine("Start Service Please Wait...");
                            ctlstart.Start();
                            Console.WriteLine("Service Started");
                            break;
                        case "stop":
                            System.ServiceProcess.ServiceController ctlstop = new ServiceController("DPADataService");

                            if (ctlstop.Status != System.ServiceProcess.ServiceControllerStatus.Stopped)
                            {
                                System.Console.WriteLine("Stop Service Please Wait...");
                                ctlstop.Stop();
                                Console.WriteLine("Service Stoped");
                            }
                            break;
                        case "help":
                        default:
                            Console.WriteLine("Usage:DataService option");
                            Console.WriteLine("option:");
                            Console.WriteLine("\tInstall\t\tInstall Service");
                            Console.WriteLine("\tUnInstall\t\tUnInstall Service");
                            Console.WriteLine("\tService\t\tRun Service");
                            Console.WriteLine("If block the option it will be run windows form as controler and moniter");
                            break;
                    }
                }
            }

        }
        static void Install()
        {
            try
            {
                Console.WriteLine("Get Install Util...");
                System.IO.Stream buffer = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("NordaSoft.InstallUtil.exe");
                System.IO.FileStream fs = System.IO.File.Open(System.Windows.Forms.Application.StartupPath + "\\InstallUtil.exe", System.IO.FileMode.Create, System.IO.FileAccess.Write);
                System.IO.BinaryReader br = new System.IO.BinaryReader(buffer);
                fs.Write(br.ReadBytes((int)buffer.Length), 0, (int)buffer.Length);
                fs.Close();
                br.Close();
                buffer.Close();
                Console.WriteLine("Install Service...");
                System.Diagnostics.ProcessStartInfo psi = new ProcessStartInfo("InstallUtil.exe", "-i \"" + System.Windows.Forms.Application.ExecutablePath + "\"");
                psi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                System.Diagnostics.Process p = System.Diagnostics.Process.Start(psi);
                p.WaitForExit();
                p.Close();
                Console.WriteLine("Install Finished");
                System.IO.File.Delete(System.Windows.Forms.Application.StartupPath + "\\InstallUtil.exe");
                System.ServiceProcess.ServiceController ctl = new ServiceController("DPADataService");
                System.Console.WriteLine("Start Service Please Wait...");
                ctl.Start();
                Console.WriteLine("Service Started");
            }
            catch (System.Exception err)
            {
                System.Console.WriteLine(err.Message);
            }
        }
        static void UnInstall()
        {
            try
            {
                System.ServiceProcess.ServiceController ctl = new ServiceController("DPADataService");

                if (ctl.Status != System.ServiceProcess.ServiceControllerStatus.Stopped)
                {
                    System.Console.WriteLine("Stop Service Please Wait...");
                    ctl.Stop();
                    Console.WriteLine("Service Stoped");
                }
                Console.WriteLine("Get UnInstall Util...");
                System.IO.Stream buffer = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("NordaSoft.InstallUtil.exe");
                System.IO.FileStream fs = System.IO.File.Open(System.Windows.Forms.Application.StartupPath + "\\InstallUtil.exe", System.IO.FileMode.Create, System.IO.FileAccess.Write);
                System.IO.BinaryReader br = new System.IO.BinaryReader(buffer);
                fs.Write(br.ReadBytes((int)buffer.Length), 0, (int)buffer.Length);
                fs.Close();
                br.Close();
                buffer.Close();
                Console.WriteLine("UnInstall Service...");
                System.Diagnostics.ProcessStartInfo psi = new ProcessStartInfo("InstallUtil.exe", "-u \"" + System.Windows.Forms.Application.ExecutablePath + "\"");
                psi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                System.Diagnostics.Process p = System.Diagnostics.Process.Start(psi);
                p.WaitForExit();
                p.Close();
                System.IO.File.Delete(System.Windows.Forms.Application.StartupPath + "\\InstallUtil.exe");
                Console.WriteLine("Service UnInstalled");
            }
            catch (System.Exception err)
            {
                System.Console.WriteLine(err.Message);
            }
        }
        #endregion
        #region 系统构造
        private void InitializeComponent()
        {
            this.AutoLog = false;
            this.CanShutdown = true;
            this.ServiceName = "DPADataService";
        }
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (components != null)
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }
        protected override void OnStart(string[] args)
        {
            // TODO: Add code here to start your service.
            tcpStoped = false;
            this.WriteLog("Service Start");
            serviceth = new System.Threading.Thread(new System.Threading.ThreadStart(Service));
            serviceth.Start();
            System.Threading.Thread.Sleep(5000);
            if (!serviceth.IsAlive)
            {
                System.ServiceProcess.ServiceController sc = new ServiceController("DPADataService");
                sc.Stop();
                sc.Dispose();
            }
        }
        protected override void OnStop()
        {
            // TODO: Add code here to perform any tear-down necessary to stop your service.
            tcpStoped = true;
            this.WriteLog("Wite For Service Stop");
            while (serviceth.IsAlive)
            {
                System.Threading.Thread.Sleep(1000);
            }
            this.WriteLog("Service Stoped");
        }
        #endregion
    }
}
